/**
 * Participant Monitoring Tools Component
 * 
 * Task 8.4.1: Individual student engagement tracking, real-time participation
 * quality assessment, and intervention alerts for disengaged students
 */

'use client';

import React, { useState, useEffect } from 'react';
import { useUser } from '@clerk/nextjs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area } from 'recharts';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { 
  User,
  Activity,
  TrendingUp,
  TrendingDown,
  AlertTriangle,
  CheckCircle2,
  Circle,
  Eye,
  Heart,
  Brain,
  MessageSquare,
  Clock,
  Target,
  Zap,
  Bell,
  Wifi,
  WifiOff,
  Mic,
  MicOff,
  Volume2,
  VolumeX,
  Timer,
  BarChart3,
  LineChart as LineChartIcon,
  PieChart,
  UserCheck,
  UserX,
  UserPlus,
  MessageCircle,
  Flag,
  Shield,
  Settings,
  Filter,
  Search,
  Headphones,
  Radio,
  Pause,
  Play,
  AlertCircle,
  Info,
  Warning,
  XCircle,
  ThumbsUp,
  ThumbsDown,
  Star,
  Award
} from 'lucide-react';

import { useTeacherDashboard } from './TeacherDashboardProvider';

// Types (extending from LiveSessionDashboard)
interface SessionParticipant {
  id: string;
  userId: string;
  name: string;
  avatar?: string;
  role: 'debater_pro' | 'debater_con' | 'observer' | 'moderator';
  status: 'online' | 'offline' | 'idle' | 'disconnected';
  joinedAt: Date;
  connection: ConnectionStatus;
  engagement: EngagementMetrics;
  performance: ParticipantPerformance;
  interventions: InterventionRecord[];
  alerts: ParticipantAlert[];
  timeline: ActivityTimelineEvent[];
  lastActivity: Date;
  sessionStats: SessionParticipantStats;
}

interface ConnectionStatus {
  quality: 'excellent' | 'good' | 'fair' | 'poor';
  latency: number; // milliseconds
  packetLoss: number; // percentage
  bandwidth: number; // kbps
  reconnections: number;
  isStable: boolean;
  lastDisconnection?: Date;
}

interface EngagementMetrics {
  participationScore: number; // 0-100
  messageCount: number;
  avgResponseTime: number; // milliseconds
  qualityScore: number; // 0-100
  attentionLevel: 'high' | 'medium' | 'low';
  timeActive: number; // milliseconds
  timeIdle: number; // milliseconds
  peakEngagementTime: Date;
  engagementTrend: 'improving' | 'stable' | 'declining';
  interactionFrequency: number; // interactions per minute
}

interface ParticipantPerformance {
  argumentQuality: number; // 0-100
  respectfulness: number; // 0-100
  evidenceUse: number; // 0-100
  logicalConsistency: number; // 0-100
  collaborationScore: number; // 0-100
  improvementTrend: 'improving' | 'stable' | 'declining';
  strongPoints: string[];
  areasForImprovement: string[];
  aiAssessmentConfidence: number; // 0-100
}

interface InterventionRecord {
  id: string;
  type: 'engagement_prompt' | 'attention_alert' | 'quality_feedback' | 'technical_support' | 'behavior_warning';
  timestamp: Date;
  reason: string;
  action: string;
  result?: 'effective' | 'partial' | 'ineffective';
  followUpRequired: boolean;
  automaticTrigger: boolean;
}

interface ParticipantAlert {
  id: string;
  type: 'engagement' | 'technical' | 'behavior' | 'performance';
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  timestamp: Date;
  acknowledged: boolean;
  resolved: boolean;
  autoGenerated: boolean;
  triggerThreshold?: number;
  currentValue?: number;
}

interface ActivityTimelineEvent {
  id: string;
  timestamp: Date;
  type: 'joined' | 'message' | 'interaction' | 'idle' | 'disconnected' | 'intervention' | 'achievement';
  description: string;
  metadata?: Record<string, any>;
}

interface SessionParticipantStats {
  totalDebateTime: number; // milliseconds
  averageMessageLength: number;
  questionsAsked: number;
  evidenceProvided: number;
  rebuttalsGiven: number;
  collaborativeInteractions: number;
  disruptiveBehavior: number;
}

interface ParticipantMonitoringToolsProps {
  sessionId: string;
  participants?: SessionParticipant[];
  onInterventionTrigger?: (participantId: string, intervention: string) => void;
  onAlertAcknowledge?: (participantId: string, alertId: string) => void;
}

export function ParticipantMonitoringTools({
  sessionId,
  participants = [],
  onInterventionTrigger,
  onAlertAcknowledge
}: ParticipantMonitoringToolsProps) {
  const { user } = useUser();
  const { addNotification } = useTeacherDashboard();
  
  const [selectedParticipant, setSelectedParticipant] = useState<SessionParticipant | null>(null);
  const [monitoringMode, setMonitoringMode] = useState<'overview' | 'detailed' | 'alerts'>('overview');
  const [autoInterventions, setAutoInterventions] = useState(true);
  const [alertThresholds, setAlertThresholds] = useState({
    lowEngagement: 30,
    idleTime: 300, // 5 minutes
    poorConnection: 60,
    qualityScore: 40
  });
  const [filters, setFilters] = useState({
    status: '',
    alertLevel: '',
    performance: '',
    search: ''
  });

  // Real-time monitoring state
  const [engagementData, setEngagementData] = useState<any[]>([]);
  const [performanceData, setPerformanceData] = useState<any[]>([]);

  useEffect(() => {
    generateTimelineData();
    const interval = setInterval(generateTimelineData, 10000); // Update every 10 seconds
    return () => clearInterval(interval);
  }, [participants]);

  const generateTimelineData = () => {
    const now = new Date();
    const timePoints = Array.from({ length: 20 }, (_, i) => {
      const time = new Date(now.getTime() - (19 - i) * 30000); // Last 10 minutes, 30-second intervals
      return {
        time: time.toLocaleTimeString('en-US', { 
          hour12: false, 
          minute: '2-digit', 
          second: '2-digit' 
        }),
        timestamp: time,
        ...participants.reduce((acc, participant) => ({
          ...acc,
          [`${participant.name}_engagement`]: Math.max(0, Math.min(100, 
            participant.engagement.participationScore + (Math.random() - 0.5) * 20
          )),
          [`${participant.name}_quality`]: Math.max(0, Math.min(100, 
            participant.performance.argumentQuality + (Math.random() - 0.5) * 15
          ))
        }), {})
      };
    });

    setEngagementData(timePoints);
    setPerformanceData(timePoints);
  };

  const triggerIntervention = (participantId: string, type: string, reason: string) => {
    const participant = participants.find(p => p.id === participantId);
    if (!participant) return;

    const intervention: InterventionRecord = {
      id: Date.now().toString(),
      type: type as any,
      timestamp: new Date(),
      reason,
      action: getInterventionAction(type),
      followUpRequired: type.includes('warning') || type.includes('alert'),
      automaticTrigger: autoInterventions
    };

    // Update participant with new intervention
    const updatedParticipant = {
      ...participant,
      interventions: [...participant.interventions, intervention]
    };

    onInterventionTrigger?.(participantId, type);

    addNotification({
      type: 'info',
      title: 'Intervention Triggered',
      message: `${getInterventionAction(type)} sent to ${participant.name}`
    });
  };

  const getInterventionAction = (type: string): string => {
    switch (type) {
      case 'engagement_prompt':
        return 'Engagement prompt sent';
      case 'attention_alert':
        return 'Attention reminder sent';
      case 'quality_feedback':
        return 'Quality improvement suggestion sent';
      case 'technical_support':
        return 'Technical support offered';
      case 'behavior_warning':
        return 'Behavior warning issued';
      default:
        return 'Intervention applied';
    }
  };

  const acknowledgeAlert = (participantId: string, alertId: string) => {
    onAlertAcknowledge?.(participantId, alertId);
    
    addNotification({
      type: 'success',
      title: 'Alert Acknowledged',
      message: 'Alert has been marked as acknowledged.'
    });
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'online':
        return 'bg-green-100 text-green-800';
      case 'idle':
        return 'bg-yellow-100 text-yellow-800';
      case 'offline':
        return 'bg-red-100 text-red-800';
      case 'disconnected':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getEngagementColor = (level: string) => {
    switch (level) {
      case 'high':
        return 'text-green-600';
      case 'medium':
        return 'text-yellow-600';
      case 'low':
        return 'text-red-600';
      default:
        return 'text-gray-600';
    }
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'improving':
        return <TrendingUp className="h-4 w-4 text-green-600" />;
      case 'declining':
        return <TrendingDown className="h-4 w-4 text-red-600" />;
      case 'stable':
        return <Activity className="h-4 w-4 text-blue-600" />;
      default:
        return <Activity className="h-4 w-4 text-gray-600" />;
    }
  };

  const getConnectionIcon = (quality: string) => {
    switch (quality) {
      case 'excellent':
        return <Wifi className="h-4 w-4 text-green-600" />;
      case 'good':
        return <Wifi className="h-4 w-4 text-blue-600" />;
      case 'fair':
        return <Wifi className="h-4 w-4 text-yellow-600" />;
      case 'poor':
        return <WifiOff className="h-4 w-4 text-red-600" />;
      default:
        return <WifiOff className="h-4 w-4 text-gray-600" />;
    }
  };

  const getPerformanceMetricColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const filteredParticipants = participants.filter(participant => {
    if (filters.status && participant.status !== filters.status) return false;
    if (filters.alertLevel) {
      const hasAlert = participant.alerts.some(alert => 
        alert.severity === filters.alertLevel && !alert.acknowledged
      );
      if (!hasAlert) return false;
    }
    if (filters.search && !participant.name.toLowerCase().includes(filters.search.toLowerCase())) return false;
    return true;
  });

  const activeAlerts = participants.reduce((total, p) => 
    total + p.alerts.filter(alert => !alert.acknowledged).length, 0);

  const avgEngagement = participants.length > 0 
    ? participants.reduce((sum, p) => sum + p.engagement.participationScore, 0) / participants.length
    : 0;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold flex items-center">
            <Users className="h-5 w-5 mr-2" />
            Participant Monitoring
          </h3>
          <p className="text-sm text-muted-foreground">
            Real-time tracking of individual participant engagement and performance
          </p>
        </div>
        <div className="flex items-center space-x-4">
          {/* Quick stats */}
          <div className="flex items-center space-x-2">
            <Badge variant="outline">
              {participants.filter(p => p.status === 'online').length}/{participants.length} Online
            </Badge>
            <Badge variant="outline">
              {Math.round(avgEngagement)}% Avg Engagement
            </Badge>
            {activeAlerts > 0 && (
              <Badge variant="destructive">
                <Bell className="h-3 w-3 mr-1" />
                {activeAlerts} Alerts
              </Badge>
            )}
          </div>
          
          {/* Controls */}
          <div className="flex items-center space-x-2">
            <div className="flex items-center space-x-2">
              <Switch
                id="auto-interventions"
                checked={autoInterventions}
                onCheckedChange={setAutoInterventions}
              />
              <label htmlFor="auto-interventions" className="text-sm font-medium">
                Auto Interventions
              </label>
            </div>
            <Select value={monitoringMode} onValueChange={(value: any) => setMonitoringMode(value)}>
              <SelectTrigger className="w-32">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="overview">Overview</SelectItem>
                <SelectItem value="detailed">Detailed</SelectItem>
                <SelectItem value="alerts">Alerts</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>

      {/* Active Alerts */}
      {activeAlerts > 0 && monitoringMode !== 'alerts' && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <strong>{activeAlerts} participant alert{activeAlerts !== 1 ? 's' : ''}</strong> requiring attention. 
            Switch to Alerts view to manage them.
          </AlertDescription>
        </Alert>
      )}

      {/* Filters */}
      <Card>
        <CardContent className="pt-4">
          <div className="grid gap-4 md:grid-cols-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Search</label>
              <div className="relative">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search participants..."
                  value={filters.search}
                  onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
                  className="pl-8"
                />
              </div>
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Status</label>
              <Select value={filters.status} onValueChange={(value) => setFilters(prev => ({ ...prev, status: value }))}>
                <SelectTrigger>
                  <SelectValue placeholder="All statuses" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">All statuses</SelectItem>
                  <SelectItem value="online">Online</SelectItem>
                  <SelectItem value="idle">Idle</SelectItem>
                  <SelectItem value="offline">Offline</SelectItem>
                  <SelectItem value="disconnected">Disconnected</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Alert Level</label>
              <Select value={filters.alertLevel} onValueChange={(value) => setFilters(prev => ({ ...prev, alertLevel: value }))}>
                <SelectTrigger>
                  <SelectValue placeholder="All levels" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">All levels</SelectItem>
                  <SelectItem value="critical">Critical</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="low">Low</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">View Mode</label>
              <Select value={monitoringMode} onValueChange={(value: any) => setMonitoringMode(value)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="overview">Overview</SelectItem>
                  <SelectItem value="detailed">Detailed</SelectItem>
                  <SelectItem value="alerts">Alerts Only</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Overview Mode */}
      {monitoringMode === 'overview' && (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {filteredParticipants.map((participant) => (
            <Card key={participant.id} className="hover:shadow-md transition-shadow">
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="flex items-center space-x-3">
                    <Avatar className="h-12 w-12">
                      <AvatarImage src={participant.avatar} />
                      <AvatarFallback>
                        {participant.name.split(' ').map(n => n[0]).join('')}
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <CardTitle className="text-base">{participant.name}</CardTitle>
                      <div className="flex items-center space-x-2 mt-1">
                        <Badge className={getStatusColor(participant.status)} variant="outline">
                          {participant.status}
                        </Badge>
                        <Badge variant="outline" className="capitalize">
                          {participant.role.replace('_', ' ')}
                        </Badge>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-1">
                    {getConnectionIcon(participant.connection.quality)}
                    {participant.alerts.filter(a => !a.acknowledged).length > 0 && (
                      <Badge variant="destructive" className="h-5 px-1">
                        {participant.alerts.filter(a => !a.acknowledged).length}
                      </Badge>
                    )}
                  </div>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Engagement Score */}
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span className="flex items-center">
                      <Heart className={`h-4 w-4 mr-2 ${getEngagementColor(participant.engagement.attentionLevel)}`} />
                      Engagement
                    </span>
                    <span className={getEngagementColor(participant.engagement.attentionLevel)}>
                      {participant.engagement.participationScore}%
                    </span>
                  </div>
                  <Progress value={participant.engagement.participationScore} />
                </div>

                {/* Quick Metrics */}
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div>
                    <div className="font-medium">Messages</div>
                    <div className="text-muted-foreground">{participant.engagement.messageCount}</div>
                  </div>
                  <div>
                    <div className="font-medium">Quality</div>
                    <div className={getPerformanceMetricColor(participant.performance.argumentQuality)}>
                      {participant.performance.argumentQuality}%
                    </div>
                  </div>
                  <div>
                    <div className="font-medium">Response Time</div>
                    <div className="text-muted-foreground">
                      {Math.round(participant.engagement.avgResponseTime / 1000)}s
                    </div>
                  </div>
                  <div>
                    <div className="font-medium">Connection</div>
                    <div className="text-muted-foreground capitalize">
                      {participant.connection.quality}
                    </div>
                  </div>
                </div>

                {/* Performance Trend */}
                <div className="flex items-center justify-between text-sm">
                  <span>Performance Trend</span>
                  <div className="flex items-center space-x-1">
                    {getTrendIcon(participant.performance.improvementTrend)}
                    <span className="capitalize">{participant.performance.improvementTrend}</span>
                  </div>
                </div>

                {/* Recent Interventions */}
                {participant.interventions.length > 0 && (
                  <div className="space-y-1">
                    <div className="text-sm font-medium">Recent Interventions</div>
                    <div className="flex flex-wrap gap-1">
                      {participant.interventions.slice(-3).map((intervention, index) => (
                        <Badge key={index} variant="outline" className="text-xs">
                          {intervention.type.replace('_', ' ')}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                {/* Actions */}
                <div className="flex items-center justify-between">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setSelectedParticipant(participant)}
                  >
                    <Eye className="h-4 w-4 mr-2" />
                    Details
                  </Button>
                  <div className="flex space-x-1">
                    {participant.engagement.participationScore < alertThresholds.lowEngagement && (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => triggerIntervention(participant.id, 'engagement_prompt', 'Low participation detected')}
                      >
                        <Zap className="h-4 w-4" />
                      </Button>
                    )}
                    {participant.alerts.filter(a => !a.acknowledged).length > 0 && (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => acknowledgeAlert(participant.id, participant.alerts[0].id)}
                      >
                        <Bell className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </div>

                {/* Active Alerts */}
                {participant.alerts.filter(a => !a.acknowledged).length > 0 && (
                  <div className="space-y-2">
                    <Separator />
                    {participant.alerts.filter(a => !a.acknowledged).slice(0, 1).map((alert) => (
                      <Alert key={alert.id} variant={alert.severity === 'high' || alert.severity === 'critical' ? 'destructive' : 'default'}>
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>
                          <div className="flex items-center justify-between">
                            <div>
                              <div className="font-medium text-xs">{alert.title}</div>
                              <div className="text-xs">{alert.description}</div>
                            </div>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => acknowledgeAlert(participant.id, alert.id)}
                            >
                              <CheckCircle2 className="h-3 w-3" />
                            </Button>
                          </div>
                        </AlertDescription>
                      </Alert>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* Detailed Mode with Real-time Charts */}
      {monitoringMode === 'detailed' && (
        <div className="space-y-6">
          {/* Engagement Timeline */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <BarChart3 className="h-5 w-5 mr-2" />
                Real-time Engagement Tracking
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={engagementData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="time" />
                    <YAxis domain={[0, 100]} />
                    <Tooltip />
                    {participants.map((participant, index) => (
                      <Line
                        key={participant.id}
                        type="monotone"
                        dataKey={`${participant.name}_engagement`}
                        stroke={`hsl(${index * 137.508}deg, 70%, 50%)`}
                        strokeWidth={2}
                        dot={false}
                      />
                    ))}
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          {/* Performance Quality Timeline */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Target className="h-5 w-5 mr-2" />
                Performance Quality Tracking
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={performanceData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="time" />
                    <YAxis domain={[0, 100]} />
                    <Tooltip />
                    {participants.map((participant, index) => (
                      <Area
                        key={participant.id}
                        type="monotone"
                        dataKey={`${participant.name}_quality`}
                        stackId="1"
                        stroke={`hsl(${index * 137.508}deg, 70%, 50%)`}
                        fill={`hsl(${index * 137.508}deg, 70%, 50%)`}
                        fillOpacity={0.3}
                      />
                    ))}
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          {/* Detailed Participant List */}
          <Card>
            <CardHeader>
              <CardTitle>Detailed Participant Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {filteredParticipants.map((participant) => (
                  <div key={participant.id} className="border rounded-lg p-4 space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Avatar className="h-10 w-10">
                          <AvatarImage src={participant.avatar} />
                          <AvatarFallback>
                            {participant.name.split(' ').map(n => n[0]).join('')}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <h4 className="font-medium">{participant.name}</h4>
                          <p className="text-sm text-muted-foreground capitalize">
                            {participant.role.replace('_', ' ')} • {participant.status}
                          </p>
                        </div>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setSelectedParticipant(participant)}
                      >
                        View Timeline
                      </Button>
                    </div>

                    {/* Detailed Metrics */}
                    <div className="grid gap-4 md:grid-cols-4">
                      <div className="space-y-2">
                        <h5 className="text-sm font-medium">Engagement Metrics</h5>
                        <div className="space-y-1 text-sm">
                          <div className="flex justify-between">
                            <span>Participation:</span>
                            <span className={getEngagementColor(participant.engagement.attentionLevel)}>
                              {participant.engagement.participationScore}%
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span>Messages:</span>
                            <span>{participant.engagement.messageCount}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Active Time:</span>
                            <span>{Math.round(participant.engagement.timeActive / 60000)}min</span>
                          </div>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <h5 className="text-sm font-medium">Performance</h5>
                        <div className="space-y-1 text-sm">
                          <div className="flex justify-between">
                            <span>Argument Quality:</span>
                            <span className={getPerformanceMetricColor(participant.performance.argumentQuality)}>
                              {participant.performance.argumentQuality}%
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span>Evidence Use:</span>
                            <span className={getPerformanceMetricColor(participant.performance.evidenceUse)}>
                              {participant.performance.evidenceUse}%
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span>Respectfulness:</span>
                            <span className={getPerformanceMetricColor(participant.performance.respectfulness)}>
                              {participant.performance.respectfulness}%
                            </span>
                          </div>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <h5 className="text-sm font-medium">Connection</h5>
                        <div className="space-y-1 text-sm">
                          <div className="flex justify-between">
                            <span>Quality:</span>
                            <span className="capitalize">{participant.connection.quality}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Latency:</span>
                            <span>{participant.connection.latency}ms</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Reconnections:</span>
                            <span>{participant.connection.reconnections}</span>
                          </div>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <h5 className="text-sm font-medium">Interventions</h5>
                        <div className="space-y-1">
                          <div className="text-sm">
                            Total: {participant.interventions.length}
                          </div>
                          <div className="flex flex-wrap gap-1">
                            {participant.interventions.slice(-2).map((intervention, index) => (
                              <Badge key={index} variant="outline" className="text-xs">
                                {intervention.type.replace('_', ' ')}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Alerts Mode */}
      {monitoringMode === 'alerts' && (
        <div className="space-y-4">
          {participants
            .filter(p => p.alerts.some(a => !a.acknowledged))
            .map((participant) => (
              <Card key={participant.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Avatar className="h-8 w-8">
                        <AvatarImage src={participant.avatar} />
                        <AvatarFallback className="text-sm">
                          {participant.name.split(' ').map(n => n[0]).join('')}
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <CardTitle className="text-base">{participant.name}</CardTitle>
                        <CardDescription>
                          {participant.alerts.filter(a => !a.acknowledged).length} active alert{participant.alerts.filter(a => !a.acknowledged).length !== 1 ? 's' : ''}
                        </CardDescription>
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {participant.alerts
                      .filter(a => !a.acknowledged)
                      .map((alert) => (
                        <Alert key={alert.id} variant={alert.severity === 'high' || alert.severity === 'critical' ? 'destructive' : 'default'}>
                          {alert.severity === 'critical' ? <AlertCircle className="h-4 w-4" /> :
                           alert.severity === 'high' ? <AlertTriangle className="h-4 w-4" /> :
                           alert.severity === 'medium' ? <Warning className="h-4 w-4" /> :
                           <Info className="h-4 w-4" />}
                          <AlertDescription className="flex items-start justify-between">
                            <div className="space-y-1">
                              <div className="font-medium">{alert.title}</div>
                              <div className="text-sm">{alert.description}</div>
                              <div className="text-xs text-muted-foreground">
                                {alert.timestamp.toLocaleString()}
                                {alert.autoGenerated && " • Auto-generated"}
                              </div>
                            </div>
                            <div className="flex space-x-2 ml-4">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => acknowledgeAlert(participant.id, alert.id)}
                              >
                                Acknowledge
                              </Button>
                              {alert.type === 'engagement' && (
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => triggerIntervention(participant.id, 'engagement_prompt', alert.description)}
                                >
                                  Intervene
                                </Button>
                              )}
                            </div>
                          </AlertDescription>
                        </Alert>
                      ))}
                  </div>
                </CardContent>
              </Card>
            ))}

          {participants.every(p => !p.alerts.some(a => !a.acknowledged)) && (
            <Card>
              <CardContent className="pt-4">
                <div className="text-center py-8">
                  <CheckCircle2 className="h-12 w-12 text-green-600 mx-auto mb-4" />
                  <h3 className="text-lg font-medium mb-2">No Active Alerts</h3>
                  <p className="text-muted-foreground">
                    All participant alerts have been acknowledged or resolved.
                  </p>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      )}

      {/* Participant Detail Dialog */}
      {selectedParticipant && (
        <Dialog open={!!selectedParticipant} onOpenChange={() => setSelectedParticipant(null)}>
          <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="flex items-center space-x-3">
                <Avatar className="h-8 w-8">
                  <AvatarImage src={selectedParticipant.avatar} />
                  <AvatarFallback>
                    {selectedParticipant.name.split(' ').map(n => n[0]).join('')}
                  </AvatarFallback>
                </Avatar>
                <span>{selectedParticipant.name} - Activity Timeline</span>
              </DialogTitle>
              <DialogDescription>
                Detailed participant activity and performance timeline
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              {/* Timeline placeholder */}
              <div className="text-center py-8">
                <Timer className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium mb-2">Activity Timeline</h3>
                <p className="text-muted-foreground">
                  Detailed participant timeline with interactions, performance changes, and interventions will be displayed here.
                </p>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}
