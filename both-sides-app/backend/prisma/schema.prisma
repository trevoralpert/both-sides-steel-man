// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// Phase 2 Task 2.1.1: User model with Clerk Integration
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

// Phase 2 Task 2.1.6: TimeBack Integration enums
enum TimeBackSyncStatus {
  PENDING
  SYNCED
  ERROR
}

model User {
  id                String    @id @default(cuid())
  clerk_id          String    @unique
  email             String    @unique
  first_name        String?
  last_name         String?
  username          String?   @unique
  avatar_url        String?
  role              UserRole  @default(STUDENT)
  is_active         Boolean   @default(true)
  last_login_at     DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Relations (to be added as we create related tables)
  profile           Profile?
  enrollments       Enrollment[]
  created_classes   Class[]
  teacher_notifications CompletionNotification[] @relation("TeacherNotifications")
  
  // Phase 4: Matching system relations
  student1_matches  Match[]         @relation("Student1Matches")
  student2_matches  Match[]         @relation("Student2Matches") 
  created_topics    DebateTopic[]   @relation("CreatedTopics")
  match_history     MatchHistory[]  @relation("UserMatchHistory")
  matched_user_history MatchHistory[] @relation("MatchedUserHistory")
  match_responses   MatchResponse[] @relation("MatchResponses")
  
  // Phase 5: Real-time debate relations
  messages          Message[]       // Messages sent by this user
  analysis_feedback AnalysisFeedback[] @relation("AnalysisFeedbackProvider")
  moderation_appeals_created ModerationAppeal[] @relation("ModerationAppealUser")
  moderation_appeals_reviewed ModerationAppeal[] @relation("ModerationAppealReviewer")
  review_queue_items ReviewQueue[] @relation("ReviewQueueUser")
  review_queue_assigned ReviewQueue[] @relation("ReviewQueueAssignee")
  coaching_feedback CoachingFeedback[] @relation("CoachingFeedbackUser")
  
  // Phase 9: Integration Layer - External system integration fields
  external_id          String?    // External system user ID (replaces timeback_user_id)
  external_system_id   String?    // Which integration system this came from
  sync_status          SyncStatus? @default(PENDING)
  last_sync_at         DateTime?
  sync_version         Int?       @default(1)
  sync_metadata        Json?      // Additional sync information
  
  // Legacy TimeBack fields (deprecated in favor of external_id)
  timeback_user_id     String?
  timeback_synced_at   DateTime?
  timeback_sync_status TimeBackSyncStatus? @default(PENDING)
  timeback_sync_version Int?     @default(1)
  
  @@map("users")
  @@index([external_id])
  @@index([external_system_id])
  @@index([sync_status])
  @@index([last_sync_at])
  @@index([timeback_user_id])
}

// Phase 2 Task 2.1.4: Profiles table for belief mapping (to be implemented later in Phase 2)
model Profile {
  id                    String    @id @default(cuid())
  is_completed          Boolean   @default(false)
  completion_date       DateTime?
  
  // Legacy survey responses (JSON storage for backward compatibility)
  legacy_survey_responses Json?
  
  // AI-generated analysis
  belief_summary        String?
  ideology_scores       Json?     // Conservative, Liberal, Libertarian, etc.
  opinion_plasticity    Float?    @default(0.5) // 0.0 = rigid, 1.0 = flexible
  
  // Vector embeddings for matching (Phase 3: Belief Mapping System - WILL BE ENABLED LATER)
  // belief_embedding      Unsupported("vector(1536)")?  // OpenAI ada-002 dimensions
  
  // Profile metadata
  profile_version       Int       @default(1)
  last_updated          DateTime  @default(now())
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  
  // Foreign key
  user_id               String    @unique
  
  // Relations
  user                  User      @relation(fields: [user_id], references: [id])
  survey_responses      SurveyResponse[]
  survey_milestones     SurveyMilestone[]
  completion_notifications CompletionNotification[]
  
  @@map("profiles")
  @@index([is_completed])
}

// Phase 2 Task 2.1.2: Organizations and Classes tables
enum OrganizationType {
  DISTRICT
  SCHOOL
  DEPARTMENT
}

model Organization {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  type              OrganizationType  @default(SCHOOL)
  parent_id         String?
  billing_email     String?
  is_active         Boolean   @default(true)
  subscription_plan String?   @default("free")
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Self-referential relationship for hierarchy
  parent            Organization? @relation("OrganizationHierarchy", fields: [parent_id], references: [id])
  children          Organization[] @relation("OrganizationHierarchy")
  
  // Relations
  classes           Class[]
  
  // Phase 9: Integration Layer - External system integration fields
  external_id          String?    // External system organization ID
  external_system_id   String?    // Which integration system this came from
  sync_status          SyncStatus? @default(PENDING)
  last_sync_at         DateTime?
  sync_version         Int?       @default(1)
  sync_metadata        Json?      // Additional sync information
  
  // Legacy TimeBack fields (deprecated in favor of external_id)
  timeback_org_id      String?
  timeback_synced_at   DateTime?
  timeback_sync_status TimeBackSyncStatus? @default(PENDING)
  timeback_sync_version Int?     @default(1)
  
  @@map("organizations")
  @@index([external_id])
  @@index([external_system_id])
  @@index([sync_status])
  @@index([last_sync_at])
  @@index([timeback_org_id])
}

model Class {
  id                String    @id @default(cuid())
  name              String
  description       String?
  subject           String?
  grade_level       String?
  academic_year     String
  term              String?   // "Fall 2024", "Spring 2025", etc.
  max_students      Int       @default(30)
  is_active         Boolean   @default(true)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Foreign keys
  organization_id   String
  teacher_id        String
  
  // Relations
  organization      Organization @relation(fields: [organization_id], references: [id])
  teacher           User         @relation(fields: [teacher_id], references: [id])
  enrollments       Enrollment[]
  completion_stats  ClassCompletionStats[]
  
  // Phase 4: Matching system relations
  matches           Match[]
  
  // Phase 9: Integration Layer - External system integration fields
  external_id          String?    // External system class ID
  external_system_id   String?    // Which integration system this came from
  sync_status          SyncStatus? @default(PENDING)
  last_sync_at         DateTime?
  sync_version         Int?       @default(1)
  sync_metadata        Json?      // Additional sync information
  
  // Legacy TimeBack fields (deprecated in favor of external_id)
  timeback_class_id    String?
  timeback_synced_at   DateTime?
  timeback_sync_status TimeBackSyncStatus? @default(PENDING)
  timeback_sync_version Int?     @default(1)
  
  @@map("classes")
  @@index([organization_id])
  @@index([teacher_id])
  @@index([external_id])
  @@index([external_system_id])
  @@index([sync_status])
  @@index([last_sync_at])
  @@index([timeback_class_id])
}

// Phase 2 Task 2.1.3: Enrollments table for student-class relationships
enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  DROPPED
  WITHDRAWN
}

model Enrollment {
  id                String            @id @default(cuid())
  enrollment_status EnrollmentStatus  @default(PENDING)
  enrolled_at       DateTime          @default(now())
  completed_at      DateTime?
  dropped_at        DateTime?
  final_grade       String?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  
  // Foreign keys
  user_id           String
  class_id          String
  
  // Relations
  user              User              @relation(fields: [user_id], references: [id])
  class             Class             @relation(fields: [class_id], references: [id])
  
  // Phase 9: Integration Layer - External system integration fields
  external_id          String?    // External system enrollment ID
  external_system_id   String?    // Which integration system this came from
  sync_status          SyncStatus? @default(PENDING)
  last_sync_at         DateTime?
  sync_version         Int?       @default(1)
  sync_metadata        Json?      // Additional sync information
  
  @@unique([user_id, class_id])
  @@map("enrollments")
  @@index([class_id, enrollment_status])
  @@index([external_id])
  @@index([external_system_id])
  @@index([sync_status])
  @@index([last_sync_at])
}

// Phase 2 Task 2.2.4: Audit logging for profile changes
model AuditLog {
  id          String    @id @default(cuid())
  entity_type String    // 'profile', 'user', 'class', etc.
  entity_id   String    
  action      String    // 'create', 'update', 'delete'
  changes     Json?     // Old and new values
  metadata    Json?     // Additional context
  created_at  DateTime  @default(now())
  
  // Who made the change
  actor_id    String?
  actor_type  String?   // 'user', 'system', 'webhook'
  
  @@map("audit_logs")
  @@index([entity_type, entity_id])
  @@index([created_at])
}

// =============================================================================
// Phase 3: Onboarding & Belief Mapping - Survey Models (Step 3.1.1)
// =============================================================================

enum SurveyQuestionCategory {
  POLITICAL
  SOCIAL
  ECONOMIC
  PHILOSOPHICAL
  PERSONAL
}

enum SurveyQuestionType {
  LIKERT
  BINARY
  MULTIPLE_CHOICE
  RANKING
  SLIDER
  TEXT
}

model Survey {
  id          String   @id @default(cuid())
  name        String
  description String?
  version     Int      @default(1)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  questions   SurveyQuestion[]
  responses   SurveyResponse[] @relation(name: "SurveyToResponse")
  completion_stats ClassCompletionStats[]

  @@map("surveys")
  @@index([is_active, version])
}

model SurveyQuestion {
  id                   String                  @id @default(cuid())
  survey_id            String
  section              String?
  order                Int
  category             SurveyQuestionCategory
  type                 SurveyQuestionType
  question             String
  options              Json?
  scale                Json?
  weight               Float                   @default(1)
  ideology_mapping     Json?
  required             Boolean                 @default(true)
  randomize_within_sec Boolean                 @default(false)
  is_active            Boolean                 @default(true)
  created_at           DateTime                @default(now())
  updated_at           DateTime                @updatedAt

  // Relations
  survey               Survey                  @relation(fields: [survey_id], references: [id])
  responses            SurveyResponse[]

  @@map("survey_questions")
  @@index([survey_id, section, order])
  @@index([is_active])
}

model SurveyResponse {
  id                String   @id @default(cuid())
  profile_id        String
  question_id       String
  response_value    Json
  response_text     String?
  confidence_level  Int?
  completion_time   Int      @default(0)
  responded_at      DateTime @default(now())
  survey_id         String
  survey_version    Int

  // Relations
  profile           Profile  @relation(fields: [profile_id], references: [id])
  question          SurveyQuestion @relation(fields: [question_id], references: [id])
  survey            Survey   @relation(fields: [survey_id], references: [id], name: "SurveyToResponse")

  @@map("survey_responses")
  @@index([profile_id])
  @@index([question_id])
  @@index([survey_id, survey_version])
}

// =============================================================================
// Phase 3 Task 3.3.4: Onboarding Completion Tracking Models
// =============================================================================

enum MilestoneType {
  SURVEY_STARTED
  SECTION_COMPLETED
  MILESTONE_25_PERCENT
  MILESTONE_50_PERCENT
  MILESTONE_75_PERCENT
  SURVEY_COMPLETED
  PROFILE_GENERATED
  PROFILE_CONFIRMED
}

enum NotificationType {
  COMPLETION_CELEBRATION
  PROGRESS_REMINDER
  TEACHER_NOTIFICATION
  FOLLOW_UP_SURVEY
  RE_ENGAGEMENT
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  EXPIRED
}

// Survey completion milestones and achievements tracking
model SurveyMilestone {
  id                String        @id @default(cuid())
  profile_id        String
  milestone_type    MilestoneType
  achieved_at       DateTime      @default(now())
  section_name      String?       // For section completion milestones
  percentage        Int?          // For percentage milestones (25, 50, 75)
  quality_score     Float?        // Response quality at milestone
  completion_time   Int?          // Time to reach milestone (milliseconds)
  metadata          Json?         // Additional milestone context

  // Relations
  profile           Profile       @relation(fields: [profile_id], references: [id])

  @@map("survey_milestones")
  @@index([profile_id, milestone_type])
  @@index([achieved_at])
  @@unique([profile_id, milestone_type, section_name])
}

// Completion analytics aggregated by class for educators
model ClassCompletionStats {
  id                    String    @id @default(cuid())
  class_id              String
  survey_id             String
  total_students        Int       @default(0)
  students_started      Int       @default(0)
  students_completed    Int       @default(0)
  avg_completion_time   Float?    // Average time in hours
  avg_quality_score     Float?    // Average response quality
  completion_rate       Float     @default(0) // Percentage completed
  last_updated          DateTime  @default(now())
  calculated_at         DateTime  @default(now())

  // Section-level breakdown (JSON)
  section_completion    Json?     // {section_name: completion_count}
  
  // Relations
  class                 Class     @relation(fields: [class_id], references: [id])
  survey                Survey    @relation(fields: [survey_id], references: [id])

  @@map("class_completion_stats")
  @@unique([class_id, survey_id])
  @@index([class_id])
  @@index([completion_rate])
}

// Notification system for completion tracking
model CompletionNotification {
  id                String             @id @default(cuid())
  profile_id        String?            // Student being notified about
  teacher_id        String?            // Teacher to notify
  notification_type NotificationType
  status            NotificationStatus @default(PENDING)
  title             String
  message           String
  metadata          Json?              // Additional context
  scheduled_for     DateTime?          // When to send notification
  sent_at           DateTime?
  delivered_at      DateTime?
  expires_at        DateTime?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt

  // Relations
  profile           Profile?           @relation(fields: [profile_id], references: [id])
  teacher           User?              @relation("TeacherNotifications", fields: [teacher_id], references: [id])

  @@map("completion_notifications")
  @@index([status, scheduled_for])
  @@index([profile_id])
  @@index([teacher_id])
  @@index([notification_type])
}

// =============================================================================
// Phase 4: Matching Engine & Debate Setup - Database Models
// =============================================================================

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum DebatePosition {
  PRO
  CON
}

enum MatchOutcome {
  COMPLETED
  CANCELLED
  NO_RESPONSE
  EXPIRED
}

// Phase 4 Task 4.1.1: Matches table for student pairing
model Match {
  id                    String         @id @default(cuid())
  class_id              String
  student1_id           String
  student2_id           String
  status                MatchStatus    @default(PENDING)
  match_quality_score   Float?         // 0-100 quality prediction
  topic_id              String?        // Nullable until topic selection
  student1_position     DebatePosition?
  student2_position     DebatePosition?
  expires_at            DateTime?      // Match expiration time
  match_metadata        Json?          // Algorithm decision details
  created_at            DateTime       @default(now())
  updated_at            DateTime       @updatedAt

  // Relations
  class                 Class          @relation(fields: [class_id], references: [id])
  student1              User           @relation("Student1Matches", fields: [student1_id], references: [id])
  student2              User           @relation("Student2Matches", fields: [student2_id], references: [id])
  topic                 DebateTopic?   @relation(fields: [topic_id], references: [id])
  match_history         MatchHistory[]
  match_responses       MatchResponse[]
  
  // Phase 5: Real-time debate relations
  conversation          Conversation?  // One-to-one relationship

  @@map("matches")
  @@index([class_id])
  @@index([status])
  @@index([student1_id])
  @@index([student2_id])
  @@index([topic_id])
  @@index([expires_at])
}

// Phase 4 Task 4.1.1: Debate topics management
model DebateTopic {
  id                    String    @id @default(cuid())
  title                 String
  description           String
  category              String    // "Politics", "Ethics", "Technology", etc.
  difficulty_level      Int       @default(5)  // 1-10 scale
  complexity_score      Float?    // Calculated complexity metric
  pro_resources         Json?     // Resources supporting PRO position
  con_resources         Json?     // Resources supporting CON position
  is_active             Boolean   @default(true)
  usage_count           Int       @default(0)  // Track topic usage
  success_rate          Float?    // Completion rate for this topic
  created_by            String?   // Teacher who created it
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  // Relations
  creator               User?     @relation("CreatedTopics", fields: [created_by], references: [id])
  matches               Match[]

  @@map("debate_topics")
  @@index([category])
  @@index([difficulty_level])
  @@index([is_active])
  @@index([created_by])
}

// Phase 4 Task 4.1.1: Match history tracking
model MatchHistory {
  id                    String      @id @default(cuid())
  user_id               String
  matched_user_id       String
  match_id              String
  outcome               MatchOutcome
  satisfaction_rating   Int?        // 1-5 rating from user
  learning_rating       Int?        // 1-5 how much they learned
  quality_feedback      String?     // Optional feedback text
  completion_time       Int?        // Duration in minutes
  created_at            DateTime    @default(now())

  // Relations
  user                  User        @relation("UserMatchHistory", fields: [user_id], references: [id])
  matched_user          User        @relation("MatchedUserHistory", fields: [matched_user_id], references: [id])
  match                 Match       @relation(fields: [match_id], references: [id])

  @@map("match_history")
  @@index([user_id])
  @@index([matched_user_id])
  @@index([match_id])
  @@index([outcome])
  @@index([created_at])
}

// Phase 4 Task 4.3.3: Match response tracking
model MatchResponse {
  id                    String      @id @default(cuid())
  match_id              String
  user_id               String
  response              String      // 'accept' or 'reject'
  reason                String?     // Optional reason for rejection
  responded_at          DateTime    @default(now())

  // Relations
  match                 Match       @relation(fields: [match_id], references: [id])
  user                  User        @relation("MatchResponses", fields: [user_id], references: [id])

  @@map("match_responses")
  @@unique([match_id, user_id])
  @@index([match_id])
  @@index([user_id])
}

// =============================================================================
// Phase 5: Real-time Debate System - Database Models
// =============================================================================

enum ConversationStatus {
  PREPARING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum DebatePhase {
  PREPARATION
  OPENING
  DISCUSSION
  REBUTTAL
  CLOSING
  REFLECTION
}

enum MessageContentType {
  TEXT
  SYSTEM
  MODERATION
  COACHING
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  MODERATED
  DELETED
}

enum ModerationStatus {
  APPROVED
  FLAGGED
  BLOCKED
  REVIEWED
}

// Phase 5 Task 5.1.1: Conversations table linking accepted matches to debates
model Conversation {
  id                    String             @id @default(cuid())
  match_id              String             @unique // Links to Phase 4 matches
  status                ConversationStatus @default(PREPARING)
  debate_phase          DebatePhase        @default(PREPARATION)
  phase_deadline        DateTime?          // When current phase ends
  started_at            DateTime?          // When debate actually began
  ended_at              DateTime?          // When debate completed/cancelled
  conversation_metadata Json?              // Session config, rules, etc.
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt

  // Relations
  match                 Match              @relation(fields: [match_id], references: [id], onDelete: Cascade)
  messages              Message[]
  debate_sessions       DebateSession[]
  message_analyses      MessageAnalysis[]
  review_queue_items    ReviewQueue[]

  @@map("conversations")
  @@index([status])
  @@index([debate_phase])
  @@index([phase_deadline])
  @@index([match_id, status])
}

// Phase 5 Task 5.1.1: Messages table for real-time chat in debates
model Message {
  id                    String             @id @default(cuid())
  conversation_id       String
  user_id               String
  content               String
  content_type          MessageContentType @default(TEXT)
  message_metadata      Json?              // Formatting, attachments, etc.
  reply_to_id           String?            // For threaded discussions
  status                MessageStatus      @default(SENT)
  moderation_status     ModerationStatus   @default(APPROVED)
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  edited_at             DateTime?          // Track message edits

  // Relations
  conversation          Conversation       @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user                  User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reply_to              Message?           @relation("MessageReplies", fields: [reply_to_id], references: [id])
  replies               Message[]          @relation("MessageReplies")
  analyses              MessageAnalysis[]
  analysis_feedback     AnalysisFeedback[]
  moderation_results    ModerationResult[]
  moderation_appeals    ModerationAppeal[]
  review_queue_items    ReviewQueue[]

  @@map("messages")
  @@index([conversation_id])
  @@index([user_id])
  @@index([created_at])
  @@index([status])
  @@index([moderation_status])
  @@index([reply_to_id])
  @@index([conversation_id, created_at])
  @@index([conversation_id, status])
}

// Phase 5 Task 5.1.1: Debate sessions for session state management
model DebateSession {
  id                    String       @id @default(cuid())
  conversation_id       String       @unique
  session_config        Json?        // Debate rules, time limits, etc.
  participant_states    Json?        // Online status, typing, etc.
  phase_history         Json?        // Track phase transitions
  performance_metrics   Json?        // Real-time analytics
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt

  // Relations
  conversation          Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  @@map("debate_sessions")
  @@index([conversation_id])
}

// Phase 5 Task 5.3.1: Message analysis for AI moderation
model MessageAnalysis {
  id                    String       @id @default(cuid())
  message_id            String       
  conversation_id       String       
  results               Json         // Analysis results (toxicity, quality, educational)
  action_recommended    String       // approve, review, block, coach
  processing_time       Int          // Milliseconds
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt

  // Relations
  message               Message      @relation(fields: [message_id], references: [id], onDelete: Cascade)
  conversation          Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  feedback              AnalysisFeedback[]

  @@map("message_analyses")
  @@index([message_id])
  @@index([conversation_id])
  @@index([action_recommended])
  @@index([created_at])
}

// Phase 5 Task 5.3.1: Analysis feedback for model improvement
model AnalysisFeedback {
  id                    String          @id @default(cuid())
  message_id            String          
  analysis_id           String          
  feedback_type         String          // accuracy, quality, usefulness
  rating                Int             // 1-5
  comments              String?         
  provider_id           String          // teacher or moderator ID
  created_at            DateTime        @default(now())

  // Relations
  message               Message         @relation(fields: [message_id], references: [id], onDelete: Cascade)
  analysis              MessageAnalysis @relation(fields: [analysis_id], references: [id], onDelete: Cascade)
  provider              User            @relation("AnalysisFeedbackProvider", fields: [provider_id], references: [id])

  @@map("analysis_feedback")
  @@index([analysis_id])
  @@index([provider_id])
  @@index([feedback_type])
  @@index([created_at])
}

// Phase 5 Task 5.3.2: Automated moderation results and actions
model ModerationResult {
  id                    String       @id @default(cuid())
  message_id            String       
  action                String       // approve, warn, block, review, escalate, suspend
  severity              String       // low, medium, high
  reason                String       
  rule_triggered        String       
  auto_executed         Boolean      @default(false)
  appealable            Boolean      @default(false)
  executed_at           DateTime     @default(now())
  executor_id           String?      // System or moderator ID
  metadata              Json?        // Analysis results, user history, etc.
  created_at            DateTime     @default(now())

  // Relations
  message               Message      @relation(fields: [message_id], references: [id], onDelete: Cascade)
  appeals               ModerationAppeal[]

  @@map("moderation_results")
  @@index([message_id])
  @@index([action])
  @@index([severity])
  @@index([auto_executed])
  @@index([executed_at])
}

// Phase 5 Task 5.3.2: Appeal system for moderation decisions
model ModerationAppeal {
  id                    String       @id @default(cuid())
  message_id            String       
  moderation_result_id  String       
  user_id               String       
  reason                String       
  additional_evidence   String?      
  status                String       @default("pending") // pending, approved, rejected, under_review
  reviewer_id           String?      
  review_notes          String?      
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  reviewed_at           DateTime?    

  // Relations
  message               Message            @relation(fields: [message_id], references: [id], onDelete: Cascade)
  moderation_result     ModerationResult   @relation(fields: [moderation_result_id], references: [id], onDelete: Cascade)
  user                  User               @relation("ModerationAppealUser", fields: [user_id], references: [id])
  reviewer              User?              @relation("ModerationAppealReviewer", fields: [reviewer_id], references: [id])

  @@map("moderation_appeals")
  @@index([message_id])
  @@index([moderation_result_id])
  @@index([user_id])
  @@index([status])
  @@index([created_at])
}

// Phase 5 Task 5.3.2: Review queue for manual moderation
model ReviewQueue {
  id                    String       @id @default(cuid())
  type                  String       // message_review, appeal_review, escalation
  message_id            String       
  conversation_id       String       
  user_id               String       
  content               String       
  reason                String       
  priority              String       // low, medium, high
  analysis_results      Json?        
  appeal_id             String?      
  queued_at             DateTime     @default(now())
  assigned_at           DateTime?    
  assigned_to           String?      
  completed_at          DateTime?    
  resolution_notes      String?      

  // Relations
  message               Message      @relation(fields: [message_id], references: [id], onDelete: Cascade)
  conversation          Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user                  User         @relation("ReviewQueueUser", fields: [user_id], references: [id])
  assignee              User?        @relation("ReviewQueueAssignee", fields: [assigned_to], references: [id])

  @@map("review_queue")
  @@index([type])
  @@index([message_id])
  @@index([conversation_id])
  @@index([user_id])
  @@index([priority])
  @@index([assigned_to])
  @@index([queued_at])
}

// Phase 5 Task 5.3.3: AI Coaching feedback tracking
model CoachingFeedback {
  id                    String       @id @default(cuid())
  suggestion_id         String       
  user_id               String       
  rating                String       // helpful, not_helpful, irrelevant, excellent
  comments              String?      
  was_acted_upon        Boolean      @default(false)
  quality_rating        Int?         // 1-5 rating
  created_at            DateTime     @default(now())

  // Relations
  user                  User         @relation("CoachingFeedbackUser", fields: [user_id], references: [id])

  @@map("coaching_feedback")
  @@index([suggestion_id])
  @@index([user_id])
  @@index([rating])
  @@index([was_acted_upon])
  @@index([created_at])
}

// Phase 5 Task 5.3.4: Content Safety & Compliance - Safety incident tracking
model SafetyIncident {
  id                    String       @id @default(cuid())
  type                  String       // inappropriate_content, personal_info_disclosure, harassment, etc.
  severity              String       // low, medium, high, critical
  description           String       
  message_id            String?      
  conversation_id       String?      
  user_id               String?      
  reported_by           String       
  evidence              Json?        
  additional_context    String?      
  status                String       @default("OPEN") // OPEN, INVESTIGATING, RESOLVED, CLOSED
  assigned_to           String?      
  occurred_at           DateTime     @default(now())
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  resolved_at           DateTime?    
  resolution            String?      

  @@map("safety_incidents")
  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([message_id])
  @@index([conversation_id])
  @@index([user_id])
  @@index([reported_by])
  @@index([occurred_at])
}

// Phase 5 Task 5.3.4: Content retention and deletion scheduling
model ContentDeletionSchedule {
  id                    String       @id @default(cuid())
  content_id            String       
  content_type          String       // conversation, message, profile, etc.
  policy_id             String       
  scheduled_for         DateTime     
  reason                String       
  status                String       @default("SCHEDULED") // SCHEDULED, PROCESSING, COMPLETED, FAILED
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  processed_at          DateTime?    
  error_message         String?      

  @@map("content_deletion_schedule")
  @@index([content_id])
  @@index([content_type])
  @@index([policy_id])
  @@index([scheduled_for])
  @@index([status])
  @@index([created_at])
}

// Phase 5 Task 5.3.4: Content access auditing for compliance
model ContentAccessLog {
  id                    String       @id @default(cuid())
  user_id               String       
  content_id            String       
  action                String       // view, edit, delete, export, etc.
  purpose               String?      
  metadata              Json?        
  ip_address            String?      
  user_agent            String?      
  accessed_at           DateTime     @default(now())

  @@map("content_access_logs")
  @@index([user_id])
  @@index([content_id])
  @@index([action])
  @@index([accessed_at])
}

// Phase 5 Task 5.3.4: Incident escalation queue management
model EscalationQueue {
  id                    String       @id @default(cuid())
  incident_id           String       
  level                 String       // auto_handled, moderator_review, admin_review, etc.
  recipients            String[]     // Array of recipient identifiers
  scheduled_for         DateTime     
  status                String       @default("SCHEDULED") // SCHEDULED, PROCESSING, COMPLETED, FAILED
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  processed_at          DateTime?    
  error_message         String?      

  @@map("escalation_queue")
  @@index([incident_id])
  @@index([level])
  @@index([scheduled_for])
  @@index([status])
  @@index([created_at])
}

// Phase 5 Task 5.3.4: Safety check audit logs
model SafetyCheckLog {
  id                    String       @id @default(cuid())
  content_id            String       
  user_age              Int?         
  is_appropriate        Boolean      
  violations            String[]     // Array of violation types
  warnings              String[]     // Array of warning messages
  confidence_score      Float?       
  recommended_action    String?      
  created_at            DateTime     @default(now())

  @@map("safety_check_logs")
  @@index([content_id])
  @@index([user_age])
  @@index([is_appropriate])
  @@index([created_at])
}

// Phase 5 Task 5.3.4: Data anonymization audit trail
model DataAnonymizationLog {
  id                    String       @id @default(cuid())
  content_id            String       
  content_type          String       // conversation, message, profile, etc.
  has_minors            Boolean      @default(false)
  anonymized_at         DateTime     @default(now())
  reason                String       
  fields_anonymized     String[]     // Array of field names that were anonymized
  metadata              Json?        

  @@map("data_anonymization_logs")
  @@index([content_id])
  @@index([content_type])
  @@index([has_minors])
  @@index([anonymized_at])
}

// =============================================================================
// Phase 9: Integration Layer & TimeBack Preparation - Database Models
// =============================================================================

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
  CONNECTING
  DISCONNECTED
  MAINTENANCE
}

enum SyncStatus {
  PENDING
  SYNCED
  ERROR
  CONFLICT
  PROCESSING
}

enum WebhookEventStatus {
  PENDING
  PROCESSING
  PROCESSED
  FAILED
  DUPLICATE
}

// Phase 9 Task 9.1.2: Integration management tables
model Integration {
  id                    String             @id @default(cuid())
  provider_id           String             // e.g., 'timeback', 'google-classroom'
  provider_name         String             // Human-readable name
  provider_version      String             @default("1.0.0")
  status                IntegrationStatus  @default(INACTIVE)
  enabled               Boolean            @default(true)
  priority              Int                @default(50)
  environment           String             @default("sandbox") // sandbox, production, staging
  
  // Connection details
  base_url              String?
  api_version           String?
  
  // Health monitoring
  last_health_check     DateTime?
  last_successful_sync  DateTime?
  last_error            String?
  error_count           Int                @default(0)
  uptime_percentage     Float?
  average_response_time Float?
  
  // Metadata
  capabilities          String[]           // JSON array of supported capabilities
  tags                  String[]           @default([])
  description           String?
  contact_info          Json?              // Contact information for support
  
  // Timestamps
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  
  // Relations
  configurations        IntegrationConfiguration[]
  webhooks              IntegrationWebhook[]
  audit_logs            IntegrationAuditLog[]
  external_mappings     ExternalSystemMapping[]
  status_logs           IntegrationStatusLog[]
  
  @@map("integrations")
  @@unique([provider_id])
  @@index([status])
  @@index([enabled])
  @@index([provider_id, environment])
}

// Phase 9 Task 9.1.2: Integration-specific configurations
model IntegrationConfiguration {
  id                    String      @id @default(cuid())
  integration_id        String
  config_key            String      // e.g., 'authentication', 'rateLimit', 'sync'
  config_value          Json        // Configuration data (encrypted if sensitive)
  is_sensitive          Boolean     @default(false)
  is_encrypted          Boolean     @default(false)
  environment           String      @default("sandbox")
  
  // Version control
  version               Int         @default(1)
  previous_version_id   String?
  
  // Timestamps
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  expires_at            DateTime?   // For token expiration
  
  // Relations
  integration           Integration @relation(fields: [integration_id], references: [id], onDelete: Cascade)
  previous_version      IntegrationConfiguration? @relation("ConfigurationVersion", fields: [previous_version_id], references: [id])
  next_versions         IntegrationConfiguration[] @relation("ConfigurationVersion")
  
  @@map("integration_configurations")
  @@unique([integration_id, config_key, environment])
  @@index([integration_id])
  @@index([config_key])
  @@index([is_sensitive])
  @@index([expires_at])
}

// Phase 9 Task 9.1.2: Integration status monitoring
model IntegrationStatusLog {
  id                    String             @id @default(cuid())
  integration_id        String
  status                IntegrationStatus
  previous_status       IntegrationStatus?
  response_time         Float?             // Response time in milliseconds
  error_message         String?
  capabilities_checked  String[]           @default([])
  metadata              Json?              // Additional health check data
  checked_at            DateTime           @default(now())
  
  // Relations
  integration           Integration        @relation(fields: [integration_id], references: [id], onDelete: Cascade)
  
  @@map("integration_status_logs")
  @@index([integration_id])
  @@index([status])
  @@index([checked_at])
}

// Phase 9 Task 9.1.2: External system ID mappings
model ExternalSystemMapping {
  id                    String      @id @default(cuid())
  integration_id        String
  entity_type           String      // 'user', 'organization', 'class', 'enrollment'
  external_id           String      // ID in external system
  internal_id           String      // ID in our system
  
  // Sync metadata
  sync_status           SyncStatus  @default(PENDING)
  last_sync_at          DateTime?
  sync_version          Int         @default(1)
  conflict_data         Json?       // Data for conflict resolution
  
  // Entity metadata
  external_data         Json?       // Snapshot of external entity data
  internal_data         Json?       // Snapshot of internal entity data
  
  // Timestamps
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  
  // Relations
  integration           Integration @relation(fields: [integration_id], references: [id], onDelete: Cascade)
  
  @@map("external_system_mappings")
  @@unique([integration_id, entity_type, external_id])
  @@unique([integration_id, entity_type, internal_id])
  @@index([integration_id])
  @@index([entity_type])
  @@index([external_id])
  @@index([internal_id])
  @@index([sync_status])
  @@index([last_sync_at])
}

// Phase 9 Task 9.1.2: Webhook configuration and management
model IntegrationWebhook {
  id                    String      @id @default(cuid())
  integration_id        String
  webhook_id            String?     // External webhook ID from provider
  endpoint_url          String      // URL to receive webhooks
  shared_secret         String      // For signature verification
  
  // Configuration
  events                String[]    // Array of subscribed event types
  is_active             Boolean     @default(true)
  max_retries           Int         @default(3)
  timeout               Int         @default(30000) // Timeout in milliseconds
  
  // Security
  signature_header      String      @default("X-Webhook-Signature")
  timestamp_header      String      @default("X-Webhook-Timestamp")
  verify_ssl            Boolean     @default(true)
  
  // Monitoring
  last_received_at      DateTime?
  total_received        Int         @default(0)
  total_processed       Int         @default(0)
  total_failed          Int         @default(0)
  
  // Timestamps
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  
  // Relations
  integration           Integration @relation(fields: [integration_id], references: [id], onDelete: Cascade)
  webhook_events        IntegrationWebhookEvent[]
  
  @@map("integration_webhooks")
  @@index([integration_id])
  @@index([is_active])
  @@index([endpoint_url])
}

// Phase 9 Task 9.1.2: Webhook events and processing
model IntegrationWebhookEvent {
  id                    String               @id @default(cuid())
  webhook_id            String
  event_type            String               // Type of event
  event_id              String?              // External event ID for deduplication
  status                WebhookEventStatus   @default(PENDING)
  
  // Event data
  payload               Json                 // Raw webhook payload
  headers               Json?                // HTTP headers
  signature             String?              // Webhook signature
  
  // Processing
  processed_at          DateTime?
  processing_time       Int?                 // Processing time in milliseconds
  error_message         String?
  retry_count           Int                  @default(0)
  max_retries           Int                  @default(3)
  
  // Idempotency
  idempotency_key       String?              // For preventing duplicate processing
  
  // Timestamps
  received_at           DateTime             @default(now())
  next_retry_at         DateTime?
  
  // Relations
  webhook               IntegrationWebhook   @relation(fields: [webhook_id], references: [id], onDelete: Cascade)
  
  @@map("integration_webhook_events")
  @@unique([webhook_id, event_id])
  @@index([webhook_id])
  @@index([status])
  @@index([event_type])
  @@index([received_at])
  @@index([next_retry_at])
  @@index([idempotency_key])
}

// Phase 9 Task 9.1.2: Integration audit logging
model IntegrationAuditLog {
  id                    String      @id @default(cuid())
  integration_id        String
  
  // Event details
  event_type            String      // 'sync', 'config_change', 'error', 'health_check'
  event_category        String      // 'operation', 'configuration', 'security', 'performance'
  severity              String      @default("info") // 'error', 'warn', 'info', 'debug'
  
  // Event data
  description           String
  details               Json?       // Additional event details
  entity_type           String?     // Affected entity type
  entity_id             String?     // Affected entity ID
  external_entity_id    String?     // External entity ID
  
  // Context
  user_id               String?     // User who triggered the event (if applicable)
  session_id            String?     // Session or operation ID
  correlation_id        String?     // For tracking related events
  
  // Performance
  duration_ms           Int?        // Duration in milliseconds
  
  // Error information
  error_code            String?
  error_message         String?
  stack_trace           String?
  
  // Timestamps
  occurred_at           DateTime    @default(now())
  
  // Relations
  integration           Integration @relation(fields: [integration_id], references: [id], onDelete: Cascade)
  
  @@map("integration_audit_logs")
  @@index([integration_id])
  @@index([event_type])
  @@index([event_category])
  @@index([severity])
  @@index([entity_type, entity_id])
  @@index([external_entity_id])
  @@index([user_id])
  @@index([occurred_at])
  @@index([correlation_id])
}

// =============================================================================
// FUTURE PHASES - COMMENTED OUT FOR NOW (Will be uncommented in later phases)
// =============================================================================

/*
// Phase 7+ Models - To be implemented in later phases

model Reflection {
  // Will be implemented in Phase 7: Reflection & Learning System
}

model Embedding {
  // Will be implemented in Phase 3: Onboarding & Belief Mapping System
  // (for pgvector embeddings)
}
*/
