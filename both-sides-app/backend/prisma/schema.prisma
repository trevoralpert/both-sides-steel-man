// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// Phase 2 Task 2.1.1: User model with Clerk Integration
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

// Phase 2 Task 2.1.6: TimeBack Integration enums
enum TimeBackSyncStatus {
  PENDING
  SYNCED
  ERROR
}

model User {
  id                String    @id @default(cuid())
  clerk_id          String    @unique
  email             String    @unique
  first_name        String?
  last_name         String?
  username          String?   @unique
  avatar_url        String?
  role              UserRole  @default(STUDENT)
  is_active         Boolean   @default(true)
  last_login_at     DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Relations (to be added as we create related tables)
  profile           Profile?
  enrollments       Enrollment[]
  created_classes   Class[]
  
  // Future Phase integration fields (Phase 9: TimeBack Integration)
  timeback_user_id     String?
  timeback_synced_at   DateTime?
  timeback_sync_status TimeBackSyncStatus? @default(PENDING)
  timeback_sync_version Int?     @default(1)
  
  @@map("users")
  @@index([timeback_user_id])
}

// Phase 2 Task 2.1.4: Profiles table for belief mapping (to be implemented later in Phase 2)
model Profile {
  id                    String    @id @default(cuid())
  is_completed          Boolean   @default(false)
  completion_date       DateTime?
  
  // Survey responses (JSON storage for flexibility)
  survey_responses      Json?
  
  // AI-generated analysis
  belief_summary        String?
  ideology_scores       Json?     // Conservative, Liberal, Libertarian, etc.
  opinion_plasticity    Float?    @default(0.5) // 0.0 = rigid, 1.0 = flexible
  
  // Vector embeddings for matching (TO BE ADDED IN PHASE 3: Belief Mapping System)
  // belief_embedding      Unsupported("vector(1536)")?  // OpenAI ada-002 dimensions
  
  // Profile metadata
  profile_version       Int       @default(1)
  last_updated          DateTime  @default(now())
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  
  // Foreign key
  user_id               String    @unique
  
  // Relations
  user                  User      @relation(fields: [user_id], references: [id])
  survey_responses      SurveyResponse[]
  
  @@map("profiles")
  @@index([is_completed])
}

// Phase 2 Task 2.1.2: Organizations and Classes tables
enum OrganizationType {
  DISTRICT
  SCHOOL
  DEPARTMENT
}

model Organization {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  type              OrganizationType  @default(SCHOOL)
  parent_id         String?
  billing_email     String?
  is_active         Boolean   @default(true)
  subscription_plan String?   @default("free")
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Self-referential relationship for hierarchy
  parent            Organization? @relation("OrganizationHierarchy", fields: [parent_id], references: [id])
  children          Organization[] @relation("OrganizationHierarchy")
  
  // Relations
  classes           Class[]
  
  // Future Phase integration fields (Phase 9: TimeBack Integration)
  timeback_org_id      String?
  timeback_synced_at   DateTime?
  timeback_sync_status TimeBackSyncStatus? @default(PENDING)
  timeback_sync_version Int?     @default(1)
  
  @@map("organizations")
  @@index([timeback_org_id])
}

model Class {
  id                String    @id @default(cuid())
  name              String
  description       String?
  subject           String?
  grade_level       String?
  academic_year     String
  term              String?   // "Fall 2024", "Spring 2025", etc.
  max_students      Int       @default(30)
  is_active         Boolean   @default(true)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Foreign keys
  organization_id   String
  teacher_id        String
  
  // Relations
  organization      Organization @relation(fields: [organization_id], references: [id])
  teacher           User         @relation(fields: [teacher_id], references: [id])
  enrollments       Enrollment[]
  
  // Future Phase integration fields (Phase 9: TimeBack Integration)
  timeback_class_id    String?
  timeback_synced_at   DateTime?
  timeback_sync_status TimeBackSyncStatus? @default(PENDING)
  timeback_sync_version Int?     @default(1)
  
  @@map("classes")
  @@index([organization_id])
  @@index([teacher_id])
  @@index([timeback_class_id])
}

// Phase 2 Task 2.1.3: Enrollments table for student-class relationships
enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  DROPPED
  WITHDRAWN
}

model Enrollment {
  id                String            @id @default(cuid())
  enrollment_status EnrollmentStatus  @default(PENDING)
  enrolled_at       DateTime          @default(now())
  completed_at      DateTime?
  dropped_at        DateTime?
  final_grade       String?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  
  // Foreign keys
  user_id           String
  class_id          String
  
  // Relations
  user              User              @relation(fields: [user_id], references: [id])
  class             Class             @relation(fields: [class_id], references: [id])
  
  @@unique([user_id, class_id])
  @@map("enrollments")
  @@index([class_id, enrollment_status])
}

// Phase 2 Task 2.2.4: Audit logging for profile changes
model AuditLog {
  id          String    @id @default(cuid())
  entity_type String    // 'profile', 'user', 'class', etc.
  entity_id   String    
  action      String    // 'create', 'update', 'delete'
  changes     Json?     // Old and new values
  metadata    Json?     // Additional context
  created_at  DateTime  @default(now())
  
  // Who made the change
  actor_id    String?
  actor_type  String?   // 'user', 'system', 'webhook'
  
  @@map("audit_logs")
  @@index([entity_type, entity_id])
  @@index([created_at])
}

// =============================================================================
// Phase 3: Onboarding & Belief Mapping - Survey Models (Step 3.1.1)
// =============================================================================

enum SurveyQuestionCategory {
  POLITICAL
  SOCIAL
  ECONOMIC
  PHILOSOPHICAL
  PERSONAL
}

enum SurveyQuestionType {
  LIKERT
  BINARY
  MULTIPLE_CHOICE
  RANKING
  SLIDER
  TEXT
}

model Survey {
  id          String   @id @default(cuid())
  name        String
  description String?
  version     Int      @default(1)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  questions   SurveyQuestion[]
  responses   SurveyResponse[] @relation(name: "SurveyToResponse")

  @@map("surveys")
  @@index([is_active, version])
}

model SurveyQuestion {
  id                   String                  @id @default(cuid())
  survey_id            String
  section              String?
  order                Int
  category             SurveyQuestionCategory
  type                 SurveyQuestionType
  question             String
  options              Json?
  scale                Json?
  weight               Float                   @default(1)
  ideology_mapping     Json?
  required             Boolean                 @default(true)
  randomize_within_sec Boolean                 @default(false)
  is_active            Boolean                 @default(true)
  created_at           DateTime                @default(now())
  updated_at           DateTime                @updatedAt

  // Relations
  survey               Survey                  @relation(fields: [survey_id], references: [id])
  responses            SurveyResponse[]

  @@map("survey_questions")
  @@index([survey_id, section, order])
  @@index([is_active])
}

model SurveyResponse {
  id                String   @id @default(cuid())
  profile_id        String
  question_id       String
  response_value    Json
  response_text     String?
  confidence_level  Int?
  completion_time   Int      @default(0)
  responded_at      DateTime @default(now())
  survey_id         String
  survey_version    Int

  // Relations
  profile           Profile  @relation(fields: [profile_id], references: [id])
  question          SurveyQuestion @relation(fields: [question_id], references: [id])
  survey            Survey   @relation(fields: [survey_id], references: [id], name: "SurveyToResponse")

  @@map("survey_responses")
  @@index([profile_id])
  @@index([question_id])
  @@index([survey_id, survey_version])
}

// =============================================================================
// FUTURE PHASES - COMMENTED OUT FOR NOW (Will be uncommented in later phases)
// =============================================================================

/*
// Phase 5+ Models - To be implemented in later phases
// These models are commented out to maintain Phase 2 scope

model Debate {
  // Will be implemented in Phase 5: Real-time Debate System
}

model DebateParticipation {
  // Will be implemented in Phase 5: Real-time Debate System
}

model DebateMessage {
  // Will be implemented in Phase 5: Real-time Debate System
}

model Reflection {
  // Will be implemented in Phase 7: Reflection & Learning System
}

model Embedding {
  // Will be implemented in Phase 3: Onboarding & Belief Mapping System
  // (for pgvector embeddings)
}
*/
